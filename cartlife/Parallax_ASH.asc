// Main script for module 'Smooth Scrolling + Parallax'
Object *pxObj[10]; //increase value for more parallax objects

int pxObjStartX[10]; //increase value for more parallax objects
int pxObjStartY[10]; //increase value for more parallax objects

int pxObjOriginX[10]; //increase value for more parallax objects
int pxObjOriginY[10]; //increase value for more parallax objects
int numberObj=0;


float scrollSpeedX = 0.0;
float scrollSpeedY = 0.0;
float screenCentreX = 0.0;
float screenCentreY = 0.0;
float scrollOffsetX;
float scrollOffsetY;
int ViewportStart;
int screenWidth;
int halfscreenWidth;
int screenHeight;
int halfscreenHeight;


function PositionObj(){

int loop=0;

while (loop<numberObj){

  if (pxObj[loop].GetProperty("PxPos")>2) {

		//
		
		}
		
  else if (pxObj[loop].GetProperty("PxPos")==2) {

		pxObj[loop].X=FloatToInt(IntToFloat(pxObjOriginX[loop])-screenCentreX, eRoundNearest);
		pxObj[loop].Y=FloatToInt(IntToFloat(pxObjOriginY[loop])-screenCentreY, eRoundNearest);

		}

  else if (pxObj[loop].GetProperty("PxPos")==1) {

		//
		
		}


	else if (pxObj[loop].GetProperty("PxPos")==-1){
	
		//
		
		}
	
  else if (pxObj[loop].GetProperty("PxPos")==-2) {
			
		pxObj[loop].X=FloatToInt(IntToFloat(pxObjOriginX[loop])+(screenCentreX/2.0), eRoundNearest);
		pxObj[loop].Y=FloatToInt(IntToFloat(pxObjOriginY[loop])+(screenCentreY/2.0), eRoundNearest);
		
		}
	
	
  else {
	
		pxObj[loop].X=FloatToInt(IntToFloat(pxObjOriginX[loop])+screenCentreX, eRoundNearest);  
		pxObj[loop].Y=FloatToInt(IntToFloat(pxObjOriginY[loop])+screenCentreY, eRoundNearest); 
		
		}

  loop++;
  
  }

}

function SetCentre (){
  
  if (player.x<halfscreenWidth) screenCentreX=IntToFloat(halfscreenWidth);
  else if (player.x>Room.Width-halfscreenWidth) screenCentreX=IntToFloat(Room.Width-halfscreenWidth);
  else screenCentreX=IntToFloat(player.x);

  if (player.y<halfscreenHeight) screenCentreY=IntToFloat(halfscreenHeight);
  else if (player.y>Room.Height-halfscreenHeight) screenCentreY=IntToFloat(Room.Height-halfscreenHeight);
  else screenCentreY=IntToFloat(player.y);  
  }

function SetOrigins (){

  int loop=0;
  while (loop<Room.ObjectCount){
    
    if (object[loop].GetProperty("PxPos")!=0) {     
 
			pxObj[numberObj]=object[loop];

			if (object[loop].GetProperty("PxPos")>2){
			  
			//
			
			}			
	
			else if (object[loop].GetProperty("PxPos")==2){
			  
			  //Set horizontal origin for object:
			  pxObjStartX[loop]=object[loop].X;
				pxObjOriginX[numberObj]=FloatToInt((IntToFloat(object[loop].X)/IntToFloat(Room.Width))*IntToFloat((Room.Width*2)-(halfscreenWidth*2))+IntToFloat(halfscreenWidth));

				//Set vertical origin for object:
				pxObjStartY[loop]=object[loop].Y;
				pxObjOriginY[numberObj]=FloatToInt((IntToFloat(object[loop].Y)/IntToFloat(Room.Height))*IntToFloat((Room.Height*2)-(halfscreenHeight*2))+IntToFloat(halfscreenHeight));

				}
			
			else if (object[loop].GetProperty("PxPos")==1){
			  
			//
			
			}
			
			else if (object[loop].GetProperty("PxPos")==-1){
			  
			  //Set horizontal origin for object:
			  pxObjStartX[loop]=object[loop].X;
			  pxObjOriginX[numberObj]=object[loop].X-FloatToInt(IntToFloat(halfscreenWidth)*1.3);
			  
			  //Set vertical origin for object:
			  pxObjStartY[loop]=object[loop].Y;
			  pxObjOriginY[numberObj]=object[loop].Y-FloatToInt(IntToFloat(halfscreenHeight)*1.3);
			}	
			
			else if (object[loop].GetProperty("PxPos")==-2){
			  
			  //Set horizontal origin for object:
			  pxObjStartX[loop]=object[loop].X;
			  pxObjOriginX[numberObj]=object[loop].X-halfscreenWidth/2;
			  
			  //Set vertical origin for object:
			  pxObjStartY[loop]=object[loop].Y;
			  pxObjOriginY[numberObj]=object[loop].Y-halfscreenHeight/2;
			}	
				
			else if (object[loop].GetProperty("PxPos")<-2){
			  
			  //Set horizontal origin for object:
			  pxObjStartX[loop]=object[loop].X;
			  pxObjOriginX[numberObj]=object[loop].X-halfscreenWidth;
			  
			   //Set vertical origin for object:
			  pxObjStartY[loop]=object[loop].Y;
			  pxObjOriginY[numberObj]=object[loop].Y-halfscreenHeight;
			}

			numberObj++;
			
		}
		
    loop++;
    
   }
    
  PositionObj();

}

function ParallaxOn(){
  
    pxOn=1;
    PositionObj();
    int loop=0;
		while (loop<numberObj){
			pxObj[loop].Visible=true;
			loop++;
			}    
			
    }
    
function ParallaxOff(){
  
    pxOn=0;
    int loop=0;
		while (loop<numberObj){
			pxObj[loop].Visible=false;
			loop++;
			}    
			
}

function on_event (EventType event, int data){
  
	if (event==eEventLeaveRoom){
	  int loop=0;
	  while (loop<numberObj){
	    pxObj[loop].X=pxObjStartX[loop];
			pxObj[loop].Y=pxObjStartY[loop];
			loop++;
	    }
	  numberObj=0;
	  }
	  
	if (event==eEventEnterRoomBeforeFadein){
	  
				if (player.x < halfscreenWidth) scrollOffsetX = IntToFloat(halfscreenWidth) - screenCentreX;
				else if ((Room.Width - player.x)<halfscreenWidth) scrollOffsetX = IntToFloat(Room.Width-halfscreenWidth) - screenCentreX;
				else scrollOffsetX = IntToFloat(player.x) - screenCentreX;
				if (player.y < halfscreenHeight) scrollOffsetY = IntToFloat(halfscreenHeight) - screenCentreY;
				else if (Room.Height - player.y<halfscreenHeight) scrollOffsetY = IntToFloat(Room.Height-halfscreenHeight) - screenCentreY;
				else scrollOffsetY = IntToFloat(player.y) - screenCentreY;
				scrollOffsetX=0.0;
	  	  scrollOffsetY=0.0;
	  	  scrollSpeedX=0.0;
	  	  scrollSpeedY=0.0;
				SetCentre();
	  	  SetOrigins();
				if (pxOn==1) ParallaxOn();
				else ParallaxOff();
	  }
  }




function StopScrolling(){

while (FloatToInt(scrollOffsetX, eRoundNearest)!=0||FloatToInt(scrollOffsetY, eRoundNearest)!=0) Wait(1);
}

function game_start(){
system.vsync=true;
halfscreenWidth = System.ViewportWidth/2;
if (System.ViewportHeight<300) halfscreenHeight = 120;//System.ViewportHeight/2;
else halfscreenHeight = 200;

}

function repeatedly_execute_always() {
  
	if (System.OperatingSystem != eOSLinux){ // Disable smooth scrolling on Linux OS because of a problem with the Emulator

		float targetScrollSpeedX = 30.0; // pixels per second
		float slowDownRangeX = 100.0; // pixels
		
//		float targetScrollSpeedY = 30.0; // pixels per second
    float targetScrollSpeedY = 00.0; // pixels per second
		float slowDownRangeY = 100.0; // pixels	
		
		float timeStep = 10.0/40.0;
		
		SetViewport(FloatToInt(screenCentreX, eRoundNearest) - halfscreenWidth, FloatToInt(screenCentreY, eRoundNearest) - halfscreenHeight); // Set the Viewport position relative to screenCentreX and Y.

		//Horizontal Scrolling:
		
		if (player.x < halfscreenWidth) scrollOffsetX = IntToFloat(halfscreenWidth) - screenCentreX;
		else if ((Room.Width - player.x)<halfscreenWidth) scrollOffsetX = IntToFloat(Room.Width-halfscreenWidth) - screenCentreX;
		else scrollOffsetX = IntToFloat(player.x) - screenCentreX;
		
		if (scrollOffsetX > -slowDownRangeX && scrollOffsetX < slowDownRangeX) // If the scrollOffset is within the slowDownRange...
		{
			 targetScrollSpeedX = (scrollOffsetX/slowDownRangeX)*targetScrollSpeedX; // ...then shrink the targetScrollSpeed to slow the scrolling.
		}
		else	if (scrollOffsetX < 0.0) // If the scrollOffset is negative...
		{
			targetScrollSpeedX = -1.0*targetScrollSpeedX; // ...make the targetScrollSpeed negative.
		}
		
		scrollSpeedX += timeStep*(targetScrollSpeedX - scrollSpeedX); // Increase/decrease the scrollSpeed dependent upon the targetScrollSpeed.
		
		screenCentreX += (timeStep*scrollSpeedX); // Increase/decrease the screenCentre by a fraction of the scrollSpeed.

		//Vertical Scrolling:

		if (player.y < halfscreenHeight) scrollOffsetY = IntToFloat(halfscreenHeight) - screenCentreY;
  	else if (Room.Height - player.y<halfscreenHeight) scrollOffsetY = IntToFloat(Room.Height-halfscreenHeight) - screenCentreY;
    else scrollOffsetY = IntToFloat(player.y) - screenCentreY;

		if (scrollOffsetY > -slowDownRangeY && scrollOffsetY < slowDownRangeY) // If the scrollOffset is within the slowDownRange...
		{
			 targetScrollSpeedY = (scrollOffsetY/slowDownRangeY)*targetScrollSpeedY; // ...then shrink the targetScrollSpeed to slow the scrolling.
		}
		else	if (scrollOffsetY < 0.0) // If the scrollOffset is negative...
		{
			targetScrollSpeedY = -1.0*targetScrollSpeedY; // ...make the targetScrollSpeed negative.
		}
		
		scrollSpeedY += timeStep*(targetScrollSpeedY - scrollSpeedY); // Increase/decrease the scrollSpeed dependent upon the targetScrollSpeed.
		
		screenCentreY += (timeStep*scrollSpeedY); // Increase/decrease the screenCentre by a fraction of the scrollSpeed.

		if (pxOn){
		PositionObj();
		}				
	}

}