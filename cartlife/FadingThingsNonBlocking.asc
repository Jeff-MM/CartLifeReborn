// Main script for module 'FadingThingsNonBlocking'

#define MAXOBJ 50// So you can easily alter the number, 
#define MAXCHR 300// without having to 'fix' every array.
#define MAXGUI 50//

struct FadeStuff {   // Setting up a struct.
  int Transparency;  //
  int Speed;         // Setting up variables
  int Limit;         // to use within struct.
  int Counter;       //
  int Timer;         //
  int Fadeout;       //
  int Fadetime;      //
  int Fadeamount;    //
  int Visible;       //
};

FadeStuff Obj[MAXOBJ]; // Link struct to Obj.
FadeStuff Chr[MAXCHR]; // Link struct to Chr.
FadeStuff Gui[MAXGUI]; // Link struct to Gui.

Object *Fadeobj[MAXOBJ];     // Link Object to Fadeobj.
Character *Fadechar[MAXCHR]; // Link Character to Fadechar.
GUI *FadeGui[MAXGUI];        // Link GUI to FadeGui.

int Fading1,Fading2,Fading3; // Setting up Fading variable options.
int MaxFade1,MaxFade2,MaxFade3;
int ThisRoom;           // Setting up ThisRoom variable options.

//******************************************************
function SkipFade(){ // Checks to see if player Skips Scene.
  }
//----------------------------------------------------------------

function FadeObjectOut_NoBlock (Object *Objectpoint, int Value, int Speed, int Timer) {
// if (Obj[Fading1].Fadeout) return 1; //aborts if fadeout is currently being executed.
 if (Obj[Fading1].Fadeout == 1) return;
  Fadeobj[Fading1] = Objectpoint; // Setting up Script O-name.
  Obj[Fading1].Transparency = Fadeobj[Fading1].Transparency;
  Obj[Fading1].Fadeout = 1;
  Obj[Fading1].Speed = Speed;
  Obj[Fading1].Counter = Speed;
  if (Speed < 0) Obj[Fading1].Fadeamount = (-1*Speed); // i.e. if Speed = -3, Fadeamount = 3
  else Obj[Fading1].Fadeamount = 1; // 0 and +ve values for Speed
  Obj[Fading1].Limit = Value;
  Obj[Fading1].Fadetime = Timer;
  if (Fading1 < MAXOBJ) Fading1 ++;
  MaxFade1 = Fading1;
 } // FadeObjectOut end.
//----------------------------------------------------------------

function FadeObjectIn_NoBlock (Object *Objectpoint, int Value, int Speed, int Timer) {
 if (Obj[Fading1].Fadeout == 2) return; //aborts if fadeout is currently being executed.
  Fadeobj[Fading1] = Objectpoint; // Setting up Script O-name.
  if (Fadeobj[Fading1].Visible == false) {
      Fadeobj[Fading1].Transparency = 100;
      Fadeobj[Fading1].Visible = true;
    }
  Obj[Fading1].Transparency = Fadeobj[Fading1].Transparency;
  Obj[Fading1].Fadeout = 2;
  Obj[Fading1].Speed = Speed;
  Obj[Fading1].Counter = Speed;
  if (Speed < 0) Obj[Fading1].Fadeamount = (-1*Speed); // i.e. if Speed = -3, Fadeamount = 3
  else Obj[Fading1].Fadeamount = 1; // 0 and +ve values for Speed
  Obj[Fading1].Limit = Value;
  Obj[Fading1].Fadetime = Timer;
  if (Fading1 < MAXOBJ) Fading1 ++;
  MaxFade1 = Fading1;
 } // FadeObjectIn end.
//----------------------------------------------------------------

function FadeCharacterOut_NoBlock (Character *Charpointer, int Value, int Speed, int Timer) {
 if (Chr[Fading2].Fadeout == 3) return; //aborts if fadeout is currently being executed.
  Fadechar[Fading2] = Charpointer; // Setting up Script O-name.
  Chr[Fading2].Transparency = Fadechar[Fading2].Transparency;
  Chr[Fading2].Fadeout = 3;
  Chr[Fading2].Speed = Speed;
  Chr[Fading2].Counter = Speed;
  if (Speed < 0) Chr[Fading2].Fadeamount = (-1*Speed); // i.e. if Speed = -3, Fadeamount = 3
  else Chr[Fading2].Fadeamount = 1; // 0 and +ve values for Speed
  Chr[Fading2].Limit = Value;
  Chr[Fading2].Fadetime = Timer;
  if (Fading2 < MAXCHR) Fading2 ++;
  MaxFade2 = Fading2;
 } // FadeCharacterOut end.
//----------------------------------------------------------------

function FadeCharacterIn_NoBlock (Character *Charpointer, int Value, int Speed, int Timer, int X, int Y) {
 ThisRoom = player.Room;
 if (Chr[Fading2].Fadeout == 4) return; //aborts if fadeout is currently being executed.
  Fadechar[Fading2] = Charpointer; // Setting up Script O-name.
 if ((X == 0) && (Y == 0)) {
   X = Fadechar[Fading2].x; // Get previous coordinates.
   Y = Fadechar[Fading2].y; // 
  }
 else if ((X == 1) && (Y == 1)) {     
   X = Fadechar[Fading2].x - GetViewportX(); // else get new coordinates.
   Y = Fadechar[Fading2].y - GetViewportY();
  }
 if (Charpointer.Room != ThisRoom){       // Not in this room.
    Fadechar[Fading2].Transparency = 100; //Set Transparency to 100.
    Fadechar[Fading2].ChangeRoom(ThisRoom, X, Y);
  }
 else if (Charpointer.Room == ThisRoom) { // In this room.
   Chr[Fading2].Transparency = Fadechar[Fading2].Transparency; // Get current Transparency.
   Fadechar[Fading2].x = X; // New or Old coordinates.
   Fadechar[Fading2].y = Y; // New or Old coordinates.
  }
  Chr[Fading2].Fadeout = 4;
  Chr[Fading2].Speed = Speed;
  Chr[Fading2].Counter = Speed;
  if (Speed < 0) Chr[Fading2].Fadeamount = (-1*Speed); // i.e. if Speed = -3, Fadeamount = 3
  else Chr[Fading2].Fadeamount = 1; // 0 and +ve values for Speed.
  Chr[Fading2].Limit = Value;
  Chr[Fading2].Fadetime = Timer;
  if (Fading2 < MAXCHR) Fading2 ++;  
  MaxFade2 = Fading2;
 } // FadeCharacterIn end.
//----------------------------------------------------------------

function FadeGuiOut_NoBlock (GUI *MyGui, int Value, int Speed, int Timer) {
 if (Gui[Fading3].Fadeout == 5) return; //aborts if fadeout is currently being executed.
  FadeGui[Fading3] = MyGui; // Setting up Script O-name.
  Gui[Fading3].Transparency = FadeGui[Fading3].Transparency;
  Gui[Fading3].Fadeout = 5;
  Gui[Fading3].Speed = Speed;
  Gui[Fading3].Counter = Speed;
  if (Speed < 0) Gui[Fading3].Fadeamount = (-1*Speed); // i.e. if Speed = -3, Fadeamount = 3
  else Gui[Fading3].Fadeamount = 1; // 0 and +ve values for Speed.
  Gui[Fading3].Limit = Value;
  Gui[Fading3].Fadetime = Timer;
  if (Fading3 < MAXGUI) Fading3 ++;
  MaxFade3 = Fading3;
 } // FadeGuiOut end.
//----------------------------------------------------------------

function FadeGuiIn_NoBlock (GUI *MyGui, int Value, int Speed, int Timer) {
 if (Gui[Fading3].Fadeout == 6) return; //aborts if fadeout is currently being executed.
  FadeGui[Fading3] = MyGui; // Setting up Script O-name.
  if (FadeGui[Fading3].Visible == false) {
      FadeGui[Fading3].Transparency = 100;
      FadeGui[Fading3].Visible = true;
    }
  Gui[Fading3].Transparency = FadeGui[Fading3].Transparency;
  Gui[Fading3].Fadeout = 6;
  Gui[Fading3].Speed = Speed;
  Gui[Fading3].Counter = Speed;
  if (Speed < 0) Gui[Fading3].Fadeamount = (-1*Speed); // i.e. if Speed = -3, Fadeamount = 3
  else Gui[Fading3].Fadeamount = 1; // 0 and +ve values for Speed.
  Gui[Fading3].Limit = Value;
  Gui[Fading3].Fadetime = Timer;
  if (Fading3 < MAXGUI) Fading3 ++;
  MaxFade3 = Fading3;
 } // FadeGuiIn end.
//----------------------------------------------------------------

//******************************************************
//******************************************************

function repeatedly_execute_always() {

if (game.skipping_cutscene != 1) {// Check if cutscene is used.
//----------------------------------------------------------------
// This allows for Objects/Characters & GUI's to repeatedly faded in & Out
// under the rooms "repeatedly execute" function.
  int Temp2;
    if (Temp2 == MAXOBJ) {
      if (Obj[Temp2].Fadeout) {
        Obj[Temp2].Fadeout = 0; // Reset.
        Fadeobj[Temp2].Transparency = Obj[Temp2].Limit;
     }
      Temp2 ++;
    }
    Fading1 = 0; // Reset.
//  -----------------------------------------
    if (Temp2 == MAXCHR) {
      if (Chr[Temp2].Fadeout) {
        Chr[Temp2].Fadeout = 0; // Reset.
        Fadechar[Temp2].Transparency = Chr[Temp2].Limit;
     }
      Temp2 ++;
    }
    Fading2 = 0; // Reset.    
//  -----------------------------------------
    if (Temp2 == MAXGUI) {
      if (Gui[Temp2].Fadeout) {
        Gui[Temp2].Fadeout = 0; // Reset.
        FadeGui[Temp2].Transparency = Gui[Temp2].Limit;
     }
      Temp2 ++;
    }
    Fading3 = 0; // Reset.
  Temp2 = 0; // Reset.
//----------------------------------------------------------------
// Fade Objects.
 while (Fading1 < MaxFade1) { //
  while (Fading1 < MAXOBJ) {
    if (Obj[Fading1].Fadetime > 0) Obj[Fading1].Fadetime --; // Current Fadetime isn't 0 - need to wait.
    else { // Current Fadetime IS 0 - check if fade is needed.
      if (Obj[Fading1].Fadetime == 0 && Fadeobj[Fading1] != null) {
          Obj[Fading1].Transparency = Fadeobj[Fading1].Transparency;
          Obj[Fading1].Fadetime --;
      } // Obj[Fading].Fadetime == 0 end.
//  -----------------------------------------
// FadeOutObject.
    if (Obj[Fading1].Fadeout == 1) {
     if (Obj[Fading1].Transparency < Obj[Fading1].Limit) {
        Obj[Fading1].Counter --;
        if (Obj[Fading1].Counter < 0) {
          Obj[Fading1].Counter = Obj[Fading1].Speed;
          Obj[Fading1].Transparency += Obj[Fading1].Fadeamount; // or -=
          if (Obj[Fading1].Transparency > Obj[Fading1].Limit) Obj[Fading1].Transparency = Obj[Fading1].Limit; // or < makes sure actual trans doesn't pass the limit.
          Fadeobj[Fading1].Transparency = Obj[Fading1].Transparency;
         }
         if (Fadeobj[Fading1].Transparency == 100) {  // Turns object off if 
             Fadeobj[Fading1].Visible = false;        // Transparency = 100.
          }
         }
     else Obj[Fading1].Fadeout = 0;
    }
//  -----------------------------------------
// FadeInObject.
    if (Obj[Fading1].Fadeout == 2) {
     if (Obj[Fading1].Transparency > Obj[Fading1].Limit) {
        Obj[Fading1].Counter --;
        if (Obj[Fading1].Counter < 0) {
          Obj[Fading1].Counter = Obj[Fading1].Speed;
          Obj[Fading1].Transparency  -= Obj[Fading1].Fadeamount; // or +=
          if (Obj[Fading1].Transparency < Obj[Fading1].Limit) Obj[Fading1].Transparency = Obj[Fading1].Limit; // or < makes sure actual trans doesn't pass the limit.
          Fadeobj[Fading1].Transparency = Obj[Fading1].Transparency;

          if (Fadeobj[Fading1].Visible == false) {  // If object off. 
              Fadeobj[Fading1].Transparency = 100;  // Transparency = 100.
              Fadeobj[Fading1].Visible = true;      // Turns object on.
           }
         }
       }
      else Obj[Fading1].Fadeout = 0;
    }
   } // Obj[Fading1].Fadetime end.
    Fading1 ++;
  }
 } // while (Fading1 < MaxFade1) end.
  Fading1 = 0;
//----------------------------------------------------------------

// Fade Characters.
 while (Fading2 < MaxFade2) { //
  while (Fading2 < MAXCHR) {
    if (Chr[Fading2].Fadetime > 0) Chr[Fading2].Fadetime --; // Current fadetime isn't 0 - need to wait.
    else { // Current fadetime IS 0 - check if fade is needed.
      if (Chr[Fading2].Fadetime == 0 && Fadechar[Fading2] != null) {
          Chr[Fading2].Transparency = Fadechar[Fading2].Transparency;
          Chr[Fading2].Fadetime --;
      } // Chr[Fading2].Fadetime == 0 end.
//  -----------------------------------------
// FadeOutChracter.
    if (Chr[Fading2].Fadeout == 3) {
     if (Chr[Fading2].Transparency < Chr[Fading2].Limit) {
        Chr[Fading2].Counter --;
        if (Chr[Fading2].Counter < 0) {
          Chr[Fading2].Counter = Chr[Fading2].Speed;
          Chr[Fading2].Transparency += Chr[Fading2].Fadeamount; // or -=
          if (Chr[Fading2].Transparency > Chr[Fading2].Limit) Chr[Fading2].Transparency = Chr[Fading2].Limit; // or < makes sure actual trans doesn't pass the limit.
          Fadechar[Fading2].Transparency = Chr[Fading2].Transparency;
          if (Chr[Fading2].Transparency == 100){ // If Transparency equals 100.
           if (Fadechar[Fading2] != player) {    // If the character is NOT player. 
               Fadechar[Fading2].ChangeRoom(-1); // Put character (NPC) in different room.
            }
           }
          }
       }
    else Chr[Fading2].Fadeout = 0;
   }
//  -----------------------------------------
// FadeInCharacter.
    if (Chr[Fading2].Fadeout == 4) {
     if (Chr[Fading2].Transparency > Chr[Fading2].Limit) {
        Chr[Fading2].Counter --;
        if (Chr[Fading2].Counter < 0) {
          Chr[Fading2].Counter = Chr[Fading2].Speed;
          Chr[Fading2].Transparency -= Chr[Fading2].Fadeamount; // or +=
          if (Chr[Fading2].Transparency < Chr[Fading2].Limit) Chr[Fading2].Transparency = Chr[Fading2].Limit; // or > makes sure actual trans doesn't pass the limit.
          Fadechar[Fading2].Transparency = Chr[Fading2].Transparency;
          if (Fadechar[Fading2] != player) {          // If the character is NOT player. 
              Fadechar[Fading2].ChangeRoom(ThisRoom); // Put character (NPC) in this room.
           }
          }
        }
      else Chr[Fading2].Fadeout = 0;
    }
   } // Chr[Fading2].Fadetime end.
    Fading2 ++;
  }
 } // while (Fading2 < MaxFade2) end.
  Fading2 = 0;
//----------------------------------------------------------------
// Fade GUI.
 while (Fading3 < MaxFade3) {//
  while (Fading3 < MAXGUI) {
    if (Gui[Fading3].Fadetime > 0) Gui[Fading3].Fadetime --; // Current Fadetime isn't 0 - need to wait.
    else { // Current Fadetime IS 0 - check if fade is needed.
      if (Gui[Fading3].Fadetime == 0 && FadeGui[Fading3] != null) {
          Gui[Fading3].Transparency = FadeGui[Fading3].Transparency;
          Gui[Fading3].Fadetime --;
      } // Gui[Fading].Fadetime == 0 end.
//  -----------------------------------------
// FadeOutGui.
    if (Gui[Fading3].Fadeout == 5) {
     if (Gui[Fading3].Transparency < Gui[Fading3].Limit) {
        Gui[Fading3].Counter --;
        if (Gui[Fading3].Counter < 0) {
          Gui[Fading3].Counter = Gui[Fading3].Speed;
          Gui[Fading3].Transparency += Gui[Fading3].Fadeamount; // or -=
          if (Gui[Fading3].Transparency > Gui[Fading3].Limit) Gui[Fading3].Transparency = Gui[Fading3].Limit; // or < makes sure actual trans doesn't pass the limit.
          FadeGui[Fading3].Transparency = Gui[Fading3].Transparency;
         }
         if (FadeGui[Fading3].Transparency == 100) {  // Turns Gui off if 
             FadeGui[Fading3].Visible = false;        // Transparency = 100.
          }
         }
     else Gui[Fading3].Fadeout = 0;
    }
//  -----------------------------------------
// FadeInGui.
    if (Gui[Fading3].Fadeout == 6) {
     if (Gui[Fading3].Transparency > Gui[Fading3].Limit) {
        Gui[Fading3].Counter --;
        if (Gui[Fading3].Counter < 0) {
          Gui[Fading3].Counter = Gui[Fading3].Speed;
          Gui[Fading3].Transparency  -= Gui[Fading3].Fadeamount; // or +=
          if (Gui[Fading3].Transparency < Gui[Fading3].Limit) Gui[Fading3].Transparency = Gui[Fading3].Limit; // or < makes sure actual trans doesn't pass the limit.
          FadeGui[Fading3].Transparency = Gui[Fading3].Transparency;
          if (FadeGui[Fading3].Visible == false) {  // If Gui off. 
              FadeGui[Fading3].Transparency = 100;  // Transparency = 100.
              FadeGui[Fading3].Visible = true;      // Turns Gui on.
           }
         }
       }
      else Gui[Fading3].Fadeout = 0;
    }
   } // Gui[Fading3].Fadetime end.
    Fading3 ++;
  }
 } // while (Fading3 < MaxFade3) end.
  Fading3 = 0;
} // Cutscene check end.
else SkipFade();
//----------------------------------------------------------------
}// repeatedly_execute_always end.

//******************************************************
//******************************************************

function on_event (EventType event, int data) {

  if (event == eEventLeaveRoom) {
    int Temp;
    while (Temp < MAXOBJ) {
      if (Obj[Temp].Fadeout) {
        Obj[Temp].Fadeout = 0; // Reset, so won't crash in next room.
        Fadeobj[Temp].Transparency = Obj[Temp].Limit;
      }
      Temp ++;
    }
    Fading1 = 0; // Reset it per room.
    Temp = 0; // Reset 'Temp' and re-use it, instead of a second variable.
//  -----------------------------------------
    while (Temp < MAXCHR) {
      if (Chr[Temp].Fadeout) {
        Chr[Temp].Fadeout = 0; // Reset, so won't crash in next room.
        Fadechar[Temp].Transparency = Chr[Temp].Limit;
      }
      Temp ++;
    }
    Fading2 = 0; // Reset it per room.
//  -----------------------------------------
    while (Temp < MAXGUI) {
      if (Gui[Temp].Fadeout) {
        Gui[Temp].Fadeout = 0; // Reset, so won't crash in next room.
        FadeGui[Temp].Transparency = Gui[Temp].Limit;
      }
      Temp ++;
    }
    Fading3 = 0; // Reset it per room.
    Temp = 0; // Reset 'Temp' and re-use it, instead of a second variable.
//----------------------------------------------------------------
  } // eEventLeaveRoom end.
} // function on_event end.
//----------------------------------------------------------------
/*
Licensing:

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation  files  (the  "Software"),  to
 deal in the Software without restriction, including without  limitation  the
 rights to use, copy, modify, merge, publish, distribute, sublicense,  and/or
 sell copies of the Software, and to permit persons to whom the  Software  is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be  included  in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  EXPRESS  OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO  THE  WARRANTIES  OF  MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL  THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE  FOR  ANY  CLAIM,  DAMAGES  OR  OTHER
 LIABILITY, WHETHER IN AN ACTION OF  CONTRACT,  TORT  OR  OTHERWISE,  ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 IN THE SOFTWARE.
*/